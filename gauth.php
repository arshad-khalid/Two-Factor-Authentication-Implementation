<?php
class Authenticator
{
    //length of the generated authentication codes
    protected $_codeLength = 6;

    //method for generating a new secret string
    public function createSecret($secretLength = 16)

    //$secretLength parameter specifies the length of the secret string to generate with default length of 16 characters
    {
        //generate a random string of characters using the characters A-Z and 0-9
        $validChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $secret = '';
        for ($i = 0; $i < $secretLength; $i++) {
            $secret .= $validChars[array_rand(str_split($validChars))];
        }
        return $secret;
    }

    //method that calculates an authentication code for a given secret and point in time
    public function getCode($secret, $timeSlice = null)
    //$secret parameter is the secret string that was generated using the 'createSecret' method
    //$timeSlice parameter is the point in time for which the authentication code should be calculated, 
    //and is calculated as the current time divided by 30 seconds (authentication codes change every 30 seconds)

    {
        //no value is provided for $timeSlice hence it calculates the current time slice by dividing the current time by 30 seconds
        if ($timeSlice === null) {
            
            // Calculate the current time slice (time divided by 30 seconds)
            $timeSlice = floor(time() / 30);
        }
        
        //calculates the authentication code by concatenating the secret string and time slice, then hashing the result using SHA-1.
        $code = hash('sha1', $secret . $timeSlice);
        

        //The first 6 digits of the hash are used as the authentication code, and this code is returned by the method
        return substr($code, 0, $this->_codeLength);
    }

    //method to generate a url for a qr code image that is used to authenticate with a two-factor authentication (2fa) system 
    //the qr code will be generated using the google charts api and will contain the secret key provided in the $secret parameter 
    //the name of the user or account for which the QR code is being generated is specified in the $name parameter,
    //and will be encoded in the url of the qr code
    public function getQRCodeUrl($name, $secret) {

        //constructs a string that represents the url of the qr code image 
        //string is constructed by concatenating the $name and $secret parameters with the string 'otpauth://totp/'
        //resulting string is url encoded using the 'urlencode' function 
        $urlencoded = urlencode('otpauth://totp/'.$name.'?secret='.$secret);
        return 'https://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl='.$urlencoded;
    }

    //method to verify a code generated by a two-factor authentication (2fa) system
    //code is verified by calculating the expected code using the provided $secret and the current time, 
    //then comparing it to the $code provided as a parameter. this function allows for a certain amount 
    //of "time drift" by checking the code against the previous and next time slices, 
    //as well as the current time slice. the amount of time drift to allow for is specified 
    //by the $discrepancy parameter, which has a default value of 1
    public function verifyCode($secret, $code, $discrepancy = 1)
    {
        //calculate the current time slice by dividing the current time (in seconds) by 30 and rounding down to the nearest 
        //integer using the floor() function which results in a time slice value that increases by one every 30 seconds
        $currentTimeSlice = floor(time() / 30);

        //begin a for loop that will iterate from -$discrepancy to $discrepancy which means that the loop will 
        //run a total of 2 * $discrepancy + 1 times
        //in this case, $discrepancy is 1, so the loop will run three times: once for $i = -1, once for $i = 0, and once for $i = 1
        for ($i = -$discrepancy; $i <= $discrepancy; $i++) {

            //calculate the 2fa code for the current iteration of the loop by calling the getCode() function 
            //and passing it the $secret and the current time slice plus the loop variable $i
            //result of the getCode() function is stored in the $calculatedCode variable
            $calculatedCode = $this->getCode($secret, $currentTimeSlice + $i);
            if ($calculatedCode == $code ) {
                
                //if calculated code is equal to code entered by user, it is valid
                return true;
            }
        }
        //else the code is not valid
        return false;
    }

    //method for setting the length of the generated authentication codes
    public function setCodeLength($length)
    {
        $this->_codeLength = $length;
    }
}
